<!-- $pagetitle: Drafts -->
<!-- @import "header.kit" -->
<!-- @import "bootstrap-menu.kit" -->

<div class="block container theme-showcase">

	<h3 class='section_header'>Drafts</h3>
	<p>Tap to edit, swipe left to delete</p>

		<div class='row draft_headers'>
			<div class='col-md-2 col-sm-2'>Type</div>
			<div class='col-md-2 col-sm-2'>Auditor</div>
			<div class='col-md-6 col-sm-6'>Auditee Facility &amp; Department</div>
			<div class='col-md-2 col-sm-2'>Last Modified</div>
		</div>
		<div class='draft_results' id="draft_results">
			Loading...
		</div>
</div>
</article>
</div>



<!-- @import "footer.kit" -->


<script id="draft-template" type="text/x-handlebars-template">

	{{#each drafts}}
		<div class='row' data-draftid='{{this.id}}'>
			<div class='fixed'>
				<div class='deletelink'>Delete</div>
			</div>
			<div class='moveable'>
				<a href='{{this.formlink}}draftid={{this.id}}' class='draft-row'>
					<div class='col-md-2 col-sm-2 col-xs-6'>{{this.type}}</div>
					<div class='col-md-2 col-sm-2 col-xs-6'>{{this.data.AuditorX.ContactName}}</div>
					<div class='col-md-6 col-sm-6 col-xs-12'>{{this.data.ResponsibleDepartmentFacilityId}} - {{this.data.ResponsibleDepartmentId}} - {{this.data.ResponsibleOfficeCode}}</div>
					<div class='col-md-2 col-sm-2 col-xs-12'>{{this.datemodified}}</div>
				</a>
			</div>
		</div>
	{{/each}}
</script>

<script>
$(function(){

	

	FastClick.attach(document.body);

	

	draftTemplate = Handlebars.compile($("#draft-template").html());
	
	draftsDB.getDrafts(function(drafts){
		if(drafts.length == 0){
			$("#draft_results").html("No drafts stored");
		}
		else{
			// $("#draft_results").append("Hello!");
			// console.log(drafts);
			$(drafts).each(function(){
				// console.log($(this));
				if($(this)[0].type == "Driver Audit")
					$(this)[0].formlink = "form-driver.html?"
				else if ($(this)[0].type == "Safety Audit")
					$(this)[0].formlink = "bootstrap-form.html?"
				else if ($(this)[0].type == "Peer to Peer")
					$(this)[0].formlink = "bootstrap-form.html?type=peertopeer&"
			})
			
			$("#draft_results").html(draftTemplate({drafts: drafts}));

			$(".draft_results .row .moveable").each(function(){
				new SwipeToDelete($(this)[0]);
			});

			$(".deletelink").click(function(){
				// console.log('hi!');
				deleteDraft($(this).parent().parent().attr('data-draftid'));
			});

			$(".draft_results .row .moveable a").click(function(){
				if($(this).parent().hasClass('showdelete') || $(this).parent().attr('data-block-click') == 'true')
					return false;
			})
		}
	})
});


function deleteDraft(draftid){
	$(".row[data-draftid='" + draftid  + "'] .moveable").addClass('deleteDraft haveanim');
	$(".row[data-draftid='" + draftid  + "']").nextAll().addClass('row_shift_up haveanim');
	setTimeout(function(){cleanupDraft(draftid)}, 300);
	//$("")
}
function cleanupDraft(draftid){
	$(".row[data-draftid='" + draftid  + "']").remove();
	$('.row_shift_up').removeClass('haveanim row_shift_up');
	draftsDB.deleteDraft(draftid);
}

/**
 * Based on pull to refresh demo
 * @type {*}
 */
var SwipeToDelete = (function() {
	function Main(element) {
		var self = this;

		this.breakpoint = 30;

		this.element = element;


		this._slideright_offset = 0;
		this._slideleft_offset = 0;
		this._anim = null;
		this._dragged_right = false;
		this._dragged_left = false;
		this._ignore_drag = false;
		this._is_open = false;
		// console.log(this.element);
		this.hammertime = Hammer(this.element)
		.on("touch dragright dragleft dragup dragdown release", function(ev) {
			self.handleHammer(ev);
		});
	};


	/**
	 * Handle HammerJS callback
	 * @param ev
	 */
	 Main.prototype.handleHammer = function(ev) {
		var self = this;

		switch(ev.type) {
			// reset element on start
			case 'touch':
					// if(this._is_open)
					// this.hide();
					break;

			// on release we check how far we dragged
			case 'release':
				
				if(!this._ignore_drag){

					// cancel animation
					cancelAnimationFrame(this._anim);
					this._anim = null;
					$(this.element).addClass('haveanim');
					// over the breakpoint, trigger the callback
					if(ev.gesture.deltaX*-1 >= this.breakpoint) {
							// container_el.className = 'pullrefresh-loading';
							// pullrefresh_icon_el.className = 'icon loading';

							console.log("Setting it to open");
							// this.setOffset(300);
							this.setOffset(null);
							$(this.element).addClass('showdelete');
							
							this._is_open = true;
							// this.handler.call(this);
							ev.stopPropagation();
							ev.gesture.stopPropagation();
						}
					// just hide it
					else if($(this.element).hasClass('showdelete')) {
						// pullrefresh_el.className = 'slideup';
						// container_el.className = 'pullrefresh-slideup';
						$(this.element).removeClass('showdelete');
						$(this.element).attr('data-block-click', 'true');
						setTimeout("$('.row[data-draftid=\"" + $(this.element).parent().attr('data-draftid') + "\"]').find('.moveable').attr('data-block-click', 'false')", 100);
						this.setOffset(null)
						this.hide();
						this._is_open = false;
						ev.gesture.preventDefault();
						ev.stopPropagation();
						ev.gesture.stopPropagation();
					}
					else{
						this.setOffset(null)
						this.hide();
						this._is_open = false;
						ev.gesture.preventDefault();
						ev.stopPropagation();
						ev.gesture.stopPropagation();
					}
				}
				

				this._dragged_left = false;
				this._dragged_right = false;
				this._ignore_drag = false;
				console.log(ev);
			break;

			// when we dragright
			case 'dragright':
				// if dragleft has already been started for this gesture, don't process this.
				if(this._dragged_left || this._ignore_drag)
					return;
				this._dragged_right = true;
				this._dragged_left = false;

				if(!this._is_open){
					// stop browser scrolling
					// ev.gesture.preventDefault();
					this._ignore_drag = true;
					return;
				}

				// if we are not at the top move down
				// var scrollY = window.scrollY;
				// if(scrollY > 5) {
				//     return;
				// } else if(scrollY !== 0) {
				//     window.scrollTo(0,0);
				// }

				// no requestAnimationFrame instance is running, start one
				if(!this._anim) {
					$(this.element).removeClass('haveanim');
					this.updateOffset();
				}

				// stop browser scrolling
				ev.gesture.preventDefault();
				ev.stopPropagation();
				ev.gesture.stopPropagation();

				// update slidedown height
				// it will be updated when requestAnimationFrame is called
				this._slideright_offset = -100+ev.gesture.deltaX;
				if(this._slideright_offset > 0){
					this._slideright_offset = 0;
				}
				// console.log(this._anim, this._slideright_offset);
				break;
			case 'dragleft':
				// if dragright has already been started for this gesture, don't process this.
				if(this._dragged_right || this._ignore_drag)
					return;

				if(this._is_open || MainMenu._is_open){
					// ev.gesture.preventDefault();
					this._ignore_drag = true;
					return;
				}
				this._dragged_left = true;
				this._dragged_right = false;
			

				if(!this._anim	) {
					$(this.element).removeClass('haveanim').removeClass('showdelete');
					this.updateOffset();
				}

					
				// stop browser scrolling
				ev.gesture.preventDefault();
				ev.gesture.stopPropagation();
				ev.stopPropagation();
				// update slidedown height
				// it will be updated when requestAnimationFrame is called
				this._slideright_offset = ev.gesture.deltaX;
				
				if(this._slideright_offset < -200){
					this._slideright_offset = -200;
				}
				// console.log(this._anim, this._slideright_offset);
				
				break;
			
			case 'dragup':
				if(!this._dragged_right && !this._dragged_left)
					this._ignore_drag = true;
				break;
			case 'dragdown':
				if(!this._dragged_right && !this._dragged_left)
					this._ignore_drag = true;
				break;
			
			}
		};


	/**
	 * when we set the height, we just change the container y
	 * @param   {Number}    height
	 */
	 Main.prototype.setOffset = function(offset) {
		var fixedoffset = offset; 
		if(offset == null){
			$(this.element).attr('style', '');

		}
		else{
			if(Modernizr.csstransforms3d) {
				this.element.style.transform = 'translate3d('+fixedoffset+'px,0,0) ';
				this.element.style.oTransform = 'translate3d('+fixedoffset+'px,0,0)';
				this.element.style.msTransform = 'translate3d('+fixedoffset+'px,0,0)';
				this.element.style.mozTransform = 'translate3d('+fixedoffset+'px,0,0)';
				this.element.style.webkitTransform = 'translate3d('+fixedoffset+'px,0,0) scale3d(1,1,1)';
			}
			else if(Modernizr.csstransforms) {
				this.element.style.transform = 'translate('+fixedoffset+'px,0) ';
				this.element.style.oTransform = 'translate('+fixedoffset+'px,0)';
				this.element.style.msTransform = 'translate('+fixedoffset+'px,0)';
				this.element.style.mozTransform = 'translate('+fixedoffset+'px,0)';
				this.element.style.webkitTransform = 'translate('+fixedoffset+'px,0)';
			}
			else {
				this.element.style.left = fixedoffset+"px";
			}
		}
	 };


	/**
	 * hide the pullrefresh message and reset the vars
	 */
	 Main.prototype.hide = function() {
		// container_el.className = '';
		this._slideright_offset = 0;
		// this.setOffset(0);
		cancelAnimationFrame(this._anim);
		this._anim = null;
		// this._dragged_right = false;
	};



	/**
	 * update the height of the slidedown message
	 */
	 Main.prototype.updateOffset = function() {
		var self = this;

		this.setOffset(this._slideright_offset);

			// if(this._slideright_offset >= this.breakpoint){
			//     this.element.className = 'breakpoint';
			//     this.element_icon.className = 'icon arrow arrow-up';
			// }
			// else {
			//     this.element.className = '';
			//     this.element_icon.className = 'icon arrow';
			// }

			this._anim = requestAnimationFrame(function() {
				self.updateOffset();
			});
		};

		return Main;
	})();


	



</script>